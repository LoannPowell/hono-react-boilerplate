/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root';
import { Route as ResetPasswordRouteImport } from './routes/reset-password';
import { Route as RegisterRouteImport } from './routes/register';
import { Route as LoginRouteImport } from './routes/login';
import { Route as ForgotPasswordRouteImport } from './routes/forgot-password';
import { Route as AboutRouteImport } from './routes/about';
import { Route as _authenticatedRouteImport } from './routes/__authenticated';
import { Route as IndexRouteImport } from './routes/index';
import { Route as _authenticatedDashboardRouteImport } from './routes/__authenticated/dashboard';

const ResetPasswordRoute = ResetPasswordRouteImport.update({
  id: '/reset-password',
  path: '/reset-password',
  getParentRoute: () => rootRouteImport,
} as any);
const RegisterRoute = RegisterRouteImport.update({
  id: '/register',
  path: '/register',
  getParentRoute: () => rootRouteImport,
} as any);
const LoginRoute = LoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => rootRouteImport,
} as any);
const ForgotPasswordRoute = ForgotPasswordRouteImport.update({
  id: '/forgot-password',
  path: '/forgot-password',
  getParentRoute: () => rootRouteImport,
} as any);
const AboutRoute = AboutRouteImport.update({
  id: '/about',
  path: '/about',
  getParentRoute: () => rootRouteImport,
} as any);
const _authenticatedRoute = _authenticatedRouteImport.update({
  id: '/__authenticated',
  getParentRoute: () => rootRouteImport,
} as any);
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any);
const _authenticatedDashboardRoute = _authenticatedDashboardRouteImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => _authenticatedRoute,
} as any);

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute;
  '/about': typeof AboutRoute;
  '/forgot-password': typeof ForgotPasswordRoute;
  '/login': typeof LoginRoute;
  '/register': typeof RegisterRoute;
  '/reset-password': typeof ResetPasswordRoute;
  '/dashboard': typeof _authenticatedDashboardRoute;
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute;
  '/about': typeof AboutRoute;
  '/forgot-password': typeof ForgotPasswordRoute;
  '/login': typeof LoginRoute;
  '/register': typeof RegisterRoute;
  '/reset-password': typeof ResetPasswordRoute;
  '/dashboard': typeof _authenticatedDashboardRoute;
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport;
  '/': typeof IndexRoute;
  '/__authenticated': typeof _authenticatedRouteWithChildren;
  '/about': typeof AboutRoute;
  '/forgot-password': typeof ForgotPasswordRoute;
  '/login': typeof LoginRoute;
  '/register': typeof RegisterRoute;
  '/reset-password': typeof ResetPasswordRoute;
  '/__authenticated/dashboard': typeof _authenticatedDashboardRoute;
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath;
  fullPaths:
    | '/'
    | '/about'
    | '/forgot-password'
    | '/login'
    | '/register'
    | '/reset-password'
    | '/dashboard';
  fileRoutesByTo: FileRoutesByTo;
  to:
    | '/'
    | '/about'
    | '/forgot-password'
    | '/login'
    | '/register'
    | '/reset-password'
    | '/dashboard';
  id:
    | '__root__'
    | '/'
    | '/__authenticated'
    | '/about'
    | '/forgot-password'
    | '/login'
    | '/register'
    | '/reset-password'
    | '/__authenticated/dashboard';
  fileRoutesById: FileRoutesById;
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute;
  _authenticatedRoute: typeof _authenticatedRouteWithChildren;
  AboutRoute: typeof AboutRoute;
  ForgotPasswordRoute: typeof ForgotPasswordRoute;
  LoginRoute: typeof LoginRoute;
  RegisterRoute: typeof RegisterRoute;
  ResetPasswordRoute: typeof ResetPasswordRoute;
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/reset-password': {
      id: '/reset-password';
      path: '/reset-password';
      fullPath: '/reset-password';
      preLoaderRoute: typeof ResetPasswordRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    '/register': {
      id: '/register';
      path: '/register';
      fullPath: '/register';
      preLoaderRoute: typeof RegisterRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    '/login': {
      id: '/login';
      path: '/login';
      fullPath: '/login';
      preLoaderRoute: typeof LoginRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    '/forgot-password': {
      id: '/forgot-password';
      path: '/forgot-password';
      fullPath: '/forgot-password';
      preLoaderRoute: typeof ForgotPasswordRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    '/about': {
      id: '/about';
      path: '/about';
      fullPath: '/about';
      preLoaderRoute: typeof AboutRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    '/__authenticated': {
      id: '/__authenticated';
      path: '';
      fullPath: '';
      preLoaderRoute: typeof _authenticatedRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    '/': {
      id: '/';
      path: '/';
      fullPath: '/';
      preLoaderRoute: typeof IndexRouteImport;
      parentRoute: typeof rootRouteImport;
    };
    '/__authenticated/dashboard': {
      id: '/__authenticated/dashboard';
      path: '/dashboard';
      fullPath: '/dashboard';
      preLoaderRoute: typeof _authenticatedDashboardRouteImport;
      parentRoute: typeof _authenticatedRoute;
    };
  }
}

interface _authenticatedRouteChildren {
  _authenticatedDashboardRoute: typeof _authenticatedDashboardRoute;
}

const _authenticatedRouteChildren: _authenticatedRouteChildren = {
  _authenticatedDashboardRoute: _authenticatedDashboardRoute,
};

const _authenticatedRouteWithChildren = _authenticatedRoute._addFileChildren(
  _authenticatedRouteChildren
);

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  _authenticatedRoute: _authenticatedRouteWithChildren,
  AboutRoute: AboutRoute,
  ForgotPasswordRoute: ForgotPasswordRoute,
  LoginRoute: LoginRoute,
  RegisterRoute: RegisterRoute,
  ResetPasswordRoute: ResetPasswordRoute,
};
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>();
